// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "agent.proto" (package "game.agent", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Agent } from "./agent";
import type { CallData } from "./types";
import type { SimAction } from "./types";
import type { SimState } from "./types";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ModelStatus } from "./agent";
import type { ModelBuffer } from "./agent";
import type { ModelWeights } from "./agent";
import type { AgentMode } from "./agent";
import type { AgentConfig } from "./agent";
import type { ServiceState } from "./types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CommonResponse } from "./types";
import type { CommonRequest } from "./types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service game.agent.Agent
 */
export interface IAgentClient {
  /**
   * reset agent service state
   *
   * @generated from protobuf rpc: ResetService(game.types.CommonRequest) returns (game.types.CommonResponse);
   */
  resetService(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, CommonResponse>;
  /**
   * query agent service state
   *
   * @generated from protobuf rpc: QueryService(game.types.CommonRequest) returns (game.types.ServiceState);
   */
  queryService(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ServiceState>;
  /**
   * get agent configs
   *
   * @generated from protobuf rpc: GetAgentConfig(game.types.CommonRequest) returns (game.agent.AgentConfig);
   */
  getAgentConfig(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, AgentConfig>;
  /**
   * set agent configs
   *
   * @generated from protobuf rpc: SetAgentConfig(game.agent.AgentConfig) returns (game.types.CommonResponse);
   */
  setAgentConfig(
    input: AgentConfig,
    options?: RpcOptions,
  ): UnaryCall<AgentConfig, CommonResponse>;
  /**
   * get agent mode
   *
   * @generated from protobuf rpc: GetAgentMode(game.types.CommonRequest) returns (game.agent.AgentMode);
   */
  getAgentMode(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, AgentMode>;
  /**
   * set agent mode
   *
   * @generated from protobuf rpc: SetAgentMode(game.agent.AgentMode) returns (game.types.CommonResponse);
   */
  setAgentMode(
    input: AgentMode,
    options?: RpcOptions,
  ): UnaryCall<AgentMode, CommonResponse>;
  /**
   * get model weights
   *
   * @generated from protobuf rpc: GetModelWeights(game.types.CommonRequest) returns (game.agent.ModelWeights);
   */
  getModelWeights(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ModelWeights>;
  /**
   * set model weights
   *
   * @generated from protobuf rpc: SetModelWeights(game.agent.ModelWeights) returns (game.types.CommonResponse);
   */
  setModelWeights(
    input: ModelWeights,
    options?: RpcOptions,
  ): UnaryCall<ModelWeights, CommonResponse>;
  /**
   * get model buffer
   *
   * @generated from protobuf rpc: GetModelBuffer(game.types.CommonRequest) returns (game.agent.ModelBuffer);
   */
  getModelBuffer(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ModelBuffer>;
  /**
   * set model buffer
   *
   * @generated from protobuf rpc: SetModelBuffer(game.agent.ModelBuffer) returns (game.types.CommonResponse);
   */
  setModelBuffer(
    input: ModelBuffer,
    options?: RpcOptions,
  ): UnaryCall<ModelBuffer, CommonResponse>;
  /**
   * get model status
   *
   * @generated from protobuf rpc: GetModelStatus(game.types.CommonRequest) returns (game.agent.ModelStatus);
   */
  getModelStatus(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ModelStatus>;
  /**
   * set model status
   *
   * @generated from protobuf rpc: SetModelStatus(game.agent.ModelStatus) returns (game.types.CommonResponse);
   */
  setModelStatus(
    input: ModelStatus,
    options?: RpcOptions,
  ): UnaryCall<ModelStatus, CommonResponse>;
  /**
   * get action
   *
   * @generated from protobuf rpc: GetAction(stream game.types.SimState) returns (stream game.types.SimAction);
   */
  getAction(options?: RpcOptions): DuplexStreamingCall<SimState, SimAction>;
  /**
   * any rpc call
   *
   * @generated from protobuf rpc: Call(game.types.CallData) returns (game.types.CallData);
   */
  call(input: CallData, options?: RpcOptions): UnaryCall<CallData, CallData>;
}
/**
 * @generated from protobuf service game.agent.Agent
 */
export class AgentClient implements IAgentClient, ServiceInfo {
  typeName = Agent.typeName;
  methods = Agent.methods;
  options = Agent.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * reset agent service state
   *
   * @generated from protobuf rpc: ResetService(game.types.CommonRequest) returns (game.types.CommonResponse);
   */
  resetService(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, CommonResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * query agent service state
   *
   * @generated from protobuf rpc: QueryService(game.types.CommonRequest) returns (game.types.ServiceState);
   */
  queryService(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ServiceState> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, ServiceState>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * get agent configs
   *
   * @generated from protobuf rpc: GetAgentConfig(game.types.CommonRequest) returns (game.agent.AgentConfig);
   */
  getAgentConfig(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, AgentConfig> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, AgentConfig>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * set agent configs
   *
   * @generated from protobuf rpc: SetAgentConfig(game.agent.AgentConfig) returns (game.types.CommonResponse);
   */
  setAgentConfig(
    input: AgentConfig,
    options?: RpcOptions,
  ): UnaryCall<AgentConfig, CommonResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<AgentConfig, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * get agent mode
   *
   * @generated from protobuf rpc: GetAgentMode(game.types.CommonRequest) returns (game.agent.AgentMode);
   */
  getAgentMode(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, AgentMode> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, AgentMode>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * set agent mode
   *
   * @generated from protobuf rpc: SetAgentMode(game.agent.AgentMode) returns (game.types.CommonResponse);
   */
  setAgentMode(
    input: AgentMode,
    options?: RpcOptions,
  ): UnaryCall<AgentMode, CommonResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<AgentMode, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * get model weights
   *
   * @generated from protobuf rpc: GetModelWeights(game.types.CommonRequest) returns (game.agent.ModelWeights);
   */
  getModelWeights(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ModelWeights> {
    const method = this.methods[6],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, ModelWeights>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * set model weights
   *
   * @generated from protobuf rpc: SetModelWeights(game.agent.ModelWeights) returns (game.types.CommonResponse);
   */
  setModelWeights(
    input: ModelWeights,
    options?: RpcOptions,
  ): UnaryCall<ModelWeights, CommonResponse> {
    const method = this.methods[7],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ModelWeights, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * get model buffer
   *
   * @generated from protobuf rpc: GetModelBuffer(game.types.CommonRequest) returns (game.agent.ModelBuffer);
   */
  getModelBuffer(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ModelBuffer> {
    const method = this.methods[8],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, ModelBuffer>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * set model buffer
   *
   * @generated from protobuf rpc: SetModelBuffer(game.agent.ModelBuffer) returns (game.types.CommonResponse);
   */
  setModelBuffer(
    input: ModelBuffer,
    options?: RpcOptions,
  ): UnaryCall<ModelBuffer, CommonResponse> {
    const method = this.methods[9],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ModelBuffer, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * get model status
   *
   * @generated from protobuf rpc: GetModelStatus(game.types.CommonRequest) returns (game.agent.ModelStatus);
   */
  getModelStatus(
    input: CommonRequest,
    options?: RpcOptions,
  ): UnaryCall<CommonRequest, ModelStatus> {
    const method = this.methods[10],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, ModelStatus>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * set model status
   *
   * @generated from protobuf rpc: SetModelStatus(game.agent.ModelStatus) returns (game.types.CommonResponse);
   */
  setModelStatus(
    input: ModelStatus,
    options?: RpcOptions,
  ): UnaryCall<ModelStatus, CommonResponse> {
    const method = this.methods[11],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ModelStatus, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * get action
   *
   * @generated from protobuf rpc: GetAction(stream game.types.SimState) returns (stream game.types.SimAction);
   */
  getAction(options?: RpcOptions): DuplexStreamingCall<SimState, SimAction> {
    const method = this.methods[12],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SimState, SimAction>(
      "duplex",
      this._transport,
      method,
      opt,
    );
  }
  /**
   * any rpc call
   *
   * @generated from protobuf rpc: Call(game.types.CallData) returns (game.types.CallData);
   */
  call(input: CallData, options?: RpcOptions): UnaryCall<CallData, CallData> {
    const method = this.methods[13],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CallData, CallData>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
