// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "simenv.proto" (package "game.simenv", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Simenv } from "./simenv";
import type { CallData } from "./types";
import type { SimInfo } from "./simenv";
import type { SimCmd } from "./simenv";
import type { SimenvConfig } from "./simenv";
import type { ServiceState } from "./types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CommonResponse } from "./types";
import type { CommonRequest } from "./types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service game.simenv.Simenv
 */
export interface ISimenvClient {
  /**
   * reset simenv service state
   *
   * @generated from protobuf rpc: ResetService(game.types.CommonRequest) returns (game.types.CommonResponse);
   */
  resetService(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, CommonResponse>;
  /**
   * query simenv service state
   *
   * @generated from protobuf rpc: QueryService(game.types.CommonRequest) returns (game.types.ServiceState);
   */
  queryService(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, ServiceState>;
  /**
   * get simenv configs
   *
   * @generated from protobuf rpc: GetSimenvConfig(game.types.CommonRequest) returns (game.simenv.SimenvConfig);
   */
  getSimenvConfig(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, SimenvConfig>;
  /**
   * set simenv configs
   *
   * @generated from protobuf rpc: SetSimenvConfig(game.simenv.SimenvConfig) returns (game.types.CommonResponse);
   */
  setSimenvConfig(
    input: SimenvConfig,
    options?: RpcOptions
  ): UnaryCall<SimenvConfig, CommonResponse>;
  /**
   * control simenv
   *
   * @generated from protobuf rpc: SimControl(game.simenv.SimCmd) returns (game.types.CommonResponse);
   */
  simControl(
    input: SimCmd,
    options?: RpcOptions
  ): UnaryCall<SimCmd, CommonResponse>;
  /**
   * get simenv info
   *
   * @generated from protobuf rpc: SimMonitor(game.types.CommonRequest) returns (game.simenv.SimInfo);
   */
  simMonitor(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, SimInfo>;
  /**
   * any rpc call
   *
   * @generated from protobuf rpc: Call(game.types.CallData) returns (game.types.CallData);
   */
  call(input: CallData, options?: RpcOptions): UnaryCall<CallData, CallData>;
}
/**
 * @generated from protobuf service game.simenv.Simenv
 */
export class SimenvClient implements ISimenvClient, ServiceInfo {
  typeName = Simenv.typeName;
  methods = Simenv.methods;
  options = Simenv.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * reset simenv service state
   *
   * @generated from protobuf rpc: ResetService(game.types.CommonRequest) returns (game.types.CommonResponse);
   */
  resetService(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, CommonResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * query simenv service state
   *
   * @generated from protobuf rpc: QueryService(game.types.CommonRequest) returns (game.types.ServiceState);
   */
  queryService(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, ServiceState> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, ServiceState>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * get simenv configs
   *
   * @generated from protobuf rpc: GetSimenvConfig(game.types.CommonRequest) returns (game.simenv.SimenvConfig);
   */
  getSimenvConfig(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, SimenvConfig> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, SimenvConfig>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * set simenv configs
   *
   * @generated from protobuf rpc: SetSimenvConfig(game.simenv.SimenvConfig) returns (game.types.CommonResponse);
   */
  setSimenvConfig(
    input: SimenvConfig,
    options?: RpcOptions
  ): UnaryCall<SimenvConfig, CommonResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SimenvConfig, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * control simenv
   *
   * @generated from protobuf rpc: SimControl(game.simenv.SimCmd) returns (game.types.CommonResponse);
   */
  simControl(
    input: SimCmd,
    options?: RpcOptions
  ): UnaryCall<SimCmd, CommonResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SimCmd, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * get simenv info
   *
   * @generated from protobuf rpc: SimMonitor(game.types.CommonRequest) returns (game.simenv.SimInfo);
   */
  simMonitor(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, SimInfo> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, SimInfo>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * any rpc call
   *
   * @generated from protobuf rpc: Call(game.types.CallData) returns (game.types.CallData);
   */
  call(input: CallData, options?: RpcOptions): UnaryCall<CallData, CallData> {
    const method = this.methods[6],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CallData, CallData>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
}
